archetype soge(const initial_holder : address, const total_supply : nat, const metadata_coin : bytes)

/* Whitelist */

variable whitelist : map<address, date> = []

entry add_whitelist(candidate : address) {
    called by initial_holder
    effect {
        whitelist.put(candidate, now)
    }
}

entry remove_whitelist(candidate : address) {
  called by initial_holder
  require {
    r1 : contains(whitelist, candidate)
  }
  effect {
    whitelist.remove(candidate)
  }
}

// /* Currency allowed when using Buy & Sell entries */

// variable currency_whitelist : map<string, address> = []

// entry add_currency_to_whitelist(name : string, c_address : address) {
//         called by owner
//         effect {
//                 currency_whitelist.put(name, c_address)
//         }
// }

// entry delete_currency_of_whitelist(name: string) {
//         called by owner
//         effect {
//                 currency_whitelist.remove(name)
//         }
// }

asset ledger identified by holder to big_map {
  holder     : address;
  tokens     : nat = 0;
  allowance  : map<address, nat> = [];
} initialized by {
  { holder = initial_holder; tokens = total_supply }
}

constant TOKEN_ID : nat = 0

asset token_metadata to big_map {
  token_id        : nat;
  token_info      : map<string, bytes>;
} initialized with {
  {TOKEN_ID; [("", metadata_coin)]}
}

// entry set_token_metadata (tid : nat, tdata: map<string, bytes>) {
//   called by initial_holder
//   effect {
//     token_metadata.add_update(tid, { token_id = tid; token_info = tdata });
//   }
// }

entry %transfer (%from : address, %to : address, value : nat) {
  require {
    r1_1 : ledger[%from].tokens >= value otherwise "NotEnoughBalance";
  }
  effect {
    if caller <> %from then (
      const current = ledger[%from].allowance[caller] ? the : 0;
      const new_value ?= int_to_nat(current - value) : ("NotEnoughAllowance", (value, current));
      ledger[%from].allowance.put(caller, new_value);
    );
    ledger.update(%from,   { tokens -= value });
    ledger.add_update(%to, { tokens += value });
  }
}

constant USDT : address = KT1XnTn74bUtxHfDtBmm2bGZAQfhPbvKWR8o

entry sell (value : nat) {
  require {
        r2_1 : contains(whitelist, caller);
        r2_2 : ledger[caller].tokens >= value otherwise "NotEnoughBalance";
  }
  effect {
        transfer 0tz to entry self.%transfer(caller, self_address, value)
        
        // call to another smart contract that transfer USDT to the caller based on the value of the token
        // the smart contract would be connected to an oracle to get the conversion rate USDT <> SOGE
  }
}

// To buy the customers would give EUR to SOGELIFE and SOGELIFE wallet manager would use the transfer entry to give them tokens directly

entry approve(spender : address, value : nat) {
  require {
        r3_1 : contains(whitelist, caller);
        r3_2 : ledger[caller].tokens > 0;
  }
  effect {
        const previous = ledger[caller] ? (the.allowance[spender] ? the : 0) : 0;
        do_fail_if(previous > 0 and value > 0, ("UnsafeAllowanceChange", previous));
        ledger.add_update(caller, { allowance += [(spender, value)] })
  }
}

entry revoke(%address_ : address) {
  require {
        r4_1 : contains(whitelist, caller);
        r4_2 : contains(ledger[caller].allowance, %address_);
  }
  effect {
       ledger.remove(%address_)
  }
}

getter getAllowance (owner : address, spender : address) : nat {
  return (ledger[owner] ? (the.allowance[spender] ? the : 0) : 0)
}

getter getBalance (owner : address) : nat {
  return (ledger[owner] ? the.tokens : 0)
}

getter getTotalSupply () : nat {
  return total_supply
}